package org.example.realengine.demo.mapmenu;


import org.example.realengine.demo.GamePanel;

import javax.swing.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;

/**
 * The {@code MapMenuControl} class extends {@link KeyAdapter} to provide keyboard input handling
 * for the {@link MapMenuPanel}. It manages navigation through the map list and triggers actions
 * such as loading a selected map, returning to the game, or exiting the application.
 */
public final class MapMenuControl extends KeyAdapter {
    /**
     * The {@link JList} displaying the map names.
     */
    private final JList<String> mapList;
    /**
     * A list of file paths corresponding to the maps in the {@code mapList}.
     */
    private final List<String> mapPaths;
    /**
     * The {@link MapMenuPanel} instance this control is associated with.
     */
    private final MapMenuPanel mapMenuPanel;
    /**
     * The {@link GamePanel} instance, used for game-related actions like saving time or resuming the game.
     */
    private final GamePanel gamePanel;

    /**
     * Constructs a new {@code MapMenuControl}.
     *
     * @param mapList The {@link JList} component displaying the maps.
     * @param mapPaths A list of file paths for the maps.
     * @param mapMenuPanel The {@link MapMenuPanel} instance.
     * @param gamePanel The {@link GamePanel} instance.
     */
    public MapMenuControl(JList<String> mapList, List<String> mapPaths, MapMenuPanel mapMenuPanel, GamePanel gamePanel) {
        this.mapList = mapList;
        this.mapPaths = mapPaths;
        this.mapMenuPanel = mapMenuPanel;
        this.gamePanel = gamePanel;
    }

    /**
     * Handles key press events for the map menu.
     * <ul>
     *     <li>{@code KeyEvent.VK_L}: Returns to the game.</li>
     *     <li>{@code KeyEvent.VK_ESCAPE}: Saves the record time and exits the application.</li>
     *     <li>{@code KeyEvent.VK_ENTER}: Loads the currently selected map.</li>
     *     <li>{@code KeyEvent.VK_UP}: Moves the selection up in the map list.</li>
     *     <li>{@code KeyEvent.VK_DOWN}: Moves the selection down in the map list.</li>
     * </ul>
     *
     * @param e The {@link KeyEvent} generated by the key press.
     */
    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_L -> mapMenuPanel.returnToGame();
            case KeyEvent.VK_ESCAPE -> {
                gamePanel.getRecordTime().saveToFile();
                System.exit(0);
            }
            case KeyEvent.VK_ENTER -> {
                int selectedIndex = mapList.getSelectedIndex();
                if (selectedIndex >= 0 && selectedIndex < mapPaths.size()) {
                    mapMenuPanel.loadSelectedMap(mapPaths.get(selectedIndex));
                }
            }
            case KeyEvent.VK_UP -> {
                int selectedIndex = mapList.getSelectedIndex();
                if (selectedIndex > 0) {
                    mapList.setSelectedIndex(selectedIndex - 1);
                    mapList.ensureIndexIsVisible(selectedIndex - 1);
                }
            }
            case KeyEvent.VK_DOWN -> {
                int selectedIndex = mapList.getSelectedIndex();
                if (selectedIndex < mapList.getModel().getSize() - 1) {
                    mapList.setSelectedIndex(selectedIndex + 1);
                    mapList.ensureIndexIsVisible(selectedIndex + 1);
                }
            }
        }
    }
}